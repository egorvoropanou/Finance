import os
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ë–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('finance.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    amount REAL,
                    category TEXT,
                    type TEXT,
                    date TEXT)''')
    conn.commit()
    return conn

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class Form(StatesGroup):
    TYPE = State()
    AMOUNT = State()
    CATEGORY = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    init_db()
    await message.answer(
        "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_income - –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
        "/add_expense - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        parse_mode="Markdown"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
@dp.message(Command("add_income"))
async def add_income(message: types.Message, state: FSMContext):
    await state.set_state(Form.TYPE)
    await state.update_data(type="income")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
@dp.message(Command("add_expense"))
async def add_expense(message: types.Message, state: FSMContext):
    await state.set_state(Form.TYPE)
    await state.update_data(type="expense")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
@dp.message(Form.TYPE)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        await state.update_data(amount=amount)
        await state.set_state(Form.CATEGORY)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(Form.CATEGORY)
async def process_category(message: types.Message, state: FSMContext):
    data = await state.get_data()
    conn = init_db()
    cursor = conn.cursor()
    
    cursor.execute(
        "INSERT INTO transactions (user_id, amount, category, type, date) VALUES (?, ?, ?, ?, ?)",
        (message.from_user.id, data['amount'], message.text, data['type'], datetime.now().isoformat())
    )
    conn.commit()
    conn.close()
    
    await message.answer(
        f"‚úÖ {data['type']} {data['amount']} —Ä—É–±. ({message.text}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())